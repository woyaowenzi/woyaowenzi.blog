{"Asset":{"h9h5jihijuj6yfg5":{"_id":"h9h5jihijuj6yfg5","source":"themes\\landscape\\source\\js\\script.js","mtime":1388639876000,"modified":true,"full_source":"D:\\blog\\themes\\landscape\\source\\js\\script.js","path":"js\\script.js"},"s2lmw55li7resbwt":{"_id":"s2lmw55li7resbwt","source":"themes\\landscape\\source\\css\\style.styl","mtime":1388639876000,"modified":true,"full_source":"D:\\blog\\themes\\landscape\\source\\css\\style.styl","path":"css\\style.styl"},"q7u9u7d7yuoe09bo":{"_id":"q7u9u7d7yuoe09bo","source":"themes\\landscape\\source\\css\\fonts\\fontawesome-webfont.eot","mtime":1388639876000,"modified":true,"full_source":"D:\\blog\\themes\\landscape\\source\\css\\fonts\\fontawesome-webfont.eot","path":"css\\fonts\\fontawesome-webfont.eot"},"6tmq6qvazdltkd35":{"_id":"6tmq6qvazdltkd35","source":"themes\\landscape\\source\\css\\fonts\\fontawesome-webfont.svg","mtime":1388639876000,"modified":true,"full_source":"D:\\blog\\themes\\landscape\\source\\css\\fonts\\fontawesome-webfont.svg","path":"css\\fonts\\fontawesome-webfont.svg"},"a0wp04k4thmeswyz":{"_id":"a0wp04k4thmeswyz","source":"themes\\landscape\\source\\css\\fonts\\fontawesome-webfont.ttf","mtime":1388639876000,"modified":true,"full_source":"D:\\blog\\themes\\landscape\\source\\css\\fonts\\fontawesome-webfont.ttf","path":"css\\fonts\\fontawesome-webfont.ttf"},"kulp4si953rvj63m":{"_id":"kulp4si953rvj63m","source":"themes\\landscape\\source\\css\\fonts\\fontawesome-webfont.woff","mtime":1388639876000,"modified":true,"full_source":"D:\\blog\\themes\\landscape\\source\\css\\fonts\\fontawesome-webfont.woff","path":"css\\fonts\\fontawesome-webfont.woff"},"y0dj9hvl6kyfesg7":{"_id":"y0dj9hvl6kyfesg7","source":"themes\\landscape\\source\\css\\fonts\\FontAwesome.otf","mtime":1388639876000,"modified":true,"full_source":"D:\\blog\\themes\\landscape\\source\\css\\fonts\\FontAwesome.otf","path":"css\\fonts\\FontAwesome.otf"},"jhocufwo1gjudkz2":{"_id":"jhocufwo1gjudkz2","source":"themes\\landscape\\source\\css\\images\\banner.jpg","mtime":1388639876000,"modified":true,"full_source":"D:\\blog\\themes\\landscape\\source\\css\\images\\banner.jpg","path":"css\\images\\banner.jpg"},"fp432xczkgsg6t2k":{"_id":"fp432xczkgsg6t2k","source":"themes\\landscape\\source\\fancybox\\blank.gif","mtime":1388639876000,"modified":true,"full_source":"D:\\blog\\themes\\landscape\\source\\fancybox\\blank.gif","path":"fancybox\\blank.gif"},"78xfcoqcdyk3szer":{"_id":"78xfcoqcdyk3szer","source":"themes\\landscape\\source\\fancybox\\fancybox_loading.gif","mtime":1388639876000,"modified":true,"full_source":"D:\\blog\\themes\\landscape\\source\\fancybox\\fancybox_loading.gif","path":"fancybox\\fancybox_loading.gif"},"rxfx3sr695latlke":{"_id":"rxfx3sr695latlke","source":"themes\\landscape\\source\\fancybox\\fancybox_loading@2x.gif","mtime":1388639876000,"modified":true,"full_source":"D:\\blog\\themes\\landscape\\source\\fancybox\\fancybox_loading@2x.gif","path":"fancybox\\fancybox_loading@2x.gif"},"lbbzy4w45t48ahit":{"_id":"lbbzy4w45t48ahit","source":"themes\\landscape\\source\\fancybox\\fancybox_sprite.png","mtime":1388639876000,"modified":true,"full_source":"D:\\blog\\themes\\landscape\\source\\fancybox\\fancybox_sprite.png","path":"fancybox\\fancybox_sprite.png"},"h5krb06mn4p6gf4g":{"_id":"h5krb06mn4p6gf4g","source":"themes\\landscape\\source\\fancybox\\fancybox_overlay.png","mtime":1388639876000,"modified":true,"full_source":"D:\\blog\\themes\\landscape\\source\\fancybox\\fancybox_overlay.png","path":"fancybox\\fancybox_overlay.png"},"scu09fjner713oko":{"_id":"scu09fjner713oko","source":"themes\\landscape\\source\\fancybox\\fancybox_sprite@2x.png","mtime":1388639876000,"modified":true,"full_source":"D:\\blog\\themes\\landscape\\source\\fancybox\\fancybox_sprite@2x.png","path":"fancybox\\fancybox_sprite@2x.png"},"5ragrg8lo9dnuvjg":{"_id":"5ragrg8lo9dnuvjg","source":"themes\\landscape\\source\\fancybox\\jquery.fancybox.js","mtime":1388639876000,"modified":true,"full_source":"D:\\blog\\themes\\landscape\\source\\fancybox\\jquery.fancybox.js","path":"fancybox\\jquery.fancybox.js"},"uwdss9du4m3g42wz":{"_id":"uwdss9du4m3g42wz","source":"themes\\landscape\\source\\fancybox\\jquery.fancybox.css","mtime":1388639876000,"modified":true,"full_source":"D:\\blog\\themes\\landscape\\source\\fancybox\\jquery.fancybox.css","path":"fancybox\\jquery.fancybox.css"},"zijezf5oh6uxbo89":{"_id":"zijezf5oh6uxbo89","source":"themes\\landscape\\source\\fancybox\\jquery.fancybox.pack.js","mtime":1388639876000,"modified":true,"full_source":"D:\\blog\\themes\\landscape\\source\\fancybox\\jquery.fancybox.pack.js","path":"fancybox\\jquery.fancybox.pack.js"},"3byjm9let064hhor":{"_id":"3byjm9let064hhor","source":"themes\\landscape\\source\\fancybox\\helpers\\fancybox_buttons.png","mtime":1388639876000,"modified":true,"full_source":"D:\\blog\\themes\\landscape\\source\\fancybox\\helpers\\fancybox_buttons.png","path":"fancybox\\helpers\\fancybox_buttons.png"},"zi72s3e3cf712a71":{"_id":"zi72s3e3cf712a71","source":"themes\\landscape\\source\\fancybox\\helpers\\jquery.fancybox-buttons.css","mtime":1388639876000,"modified":true,"full_source":"D:\\blog\\themes\\landscape\\source\\fancybox\\helpers\\jquery.fancybox-buttons.css","path":"fancybox\\helpers\\jquery.fancybox-buttons.css"},"v4ayy1e1gz8jny0j":{"_id":"v4ayy1e1gz8jny0j","source":"themes\\landscape\\source\\fancybox\\helpers\\jquery.fancybox-buttons.js","mtime":1388639876000,"modified":true,"full_source":"D:\\blog\\themes\\landscape\\source\\fancybox\\helpers\\jquery.fancybox-buttons.js","path":"fancybox\\helpers\\jquery.fancybox-buttons.js"},"h9nwh6pqb84rtokf":{"_id":"h9nwh6pqb84rtokf","source":"themes\\landscape\\source\\fancybox\\helpers\\jquery.fancybox-media.js","mtime":1388639876000,"modified":true,"full_source":"D:\\blog\\themes\\landscape\\source\\fancybox\\helpers\\jquery.fancybox-media.js","path":"fancybox\\helpers\\jquery.fancybox-media.js"},"e2dkr812t45d7o8p":{"_id":"e2dkr812t45d7o8p","source":"themes\\landscape\\source\\fancybox\\helpers\\jquery.fancybox-thumbs.css","mtime":1388639876000,"modified":true,"full_source":"D:\\blog\\themes\\landscape\\source\\fancybox\\helpers\\jquery.fancybox-thumbs.css","path":"fancybox\\helpers\\jquery.fancybox-thumbs.css"},"0134jb6z5z2ae19l":{"_id":"0134jb6z5z2ae19l","source":"themes\\landscape\\source\\fancybox\\helpers\\jquery.fancybox-thumbs.js","mtime":1388639876000,"modified":true,"full_source":"D:\\blog\\themes\\landscape\\source\\fancybox\\helpers\\jquery.fancybox-thumbs.js","path":"fancybox\\helpers\\jquery.fancybox-thumbs.js"},"4357zzqcjtp26q08":{"_id":"4357zzqcjtp26q08","source":"themes\\light\\source\\fancybox\\blank.gif","mtime":1389801140000,"modified":false,"full_source":"C:\\Users\\林\\Documents\\GitHub\\woyaowenzi\\woyaowenzi.blog\\themes\\light\\source\\fancybox\\blank.gif","path":"fancybox\\blank.gif"},"km2kny1yeqx3h20a":{"_id":"km2kny1yeqx3h20a","source":"themes\\light\\source\\fancybox\\fancybox_loading.gif","mtime":1389801140000,"modified":false,"full_source":"C:\\Users\\林\\Documents\\GitHub\\woyaowenzi\\woyaowenzi.blog\\themes\\light\\source\\fancybox\\fancybox_loading.gif","path":"fancybox\\fancybox_loading.gif"},"ekim8bxau3teky5p":{"_id":"ekim8bxau3teky5p","source":"themes\\light\\source\\fancybox\\fancybox_loading@2x.gif","mtime":1389801140000,"modified":false,"full_source":"C:\\Users\\林\\Documents\\GitHub\\woyaowenzi\\woyaowenzi.blog\\themes\\light\\source\\fancybox\\fancybox_loading@2x.gif","path":"fancybox\\fancybox_loading@2x.gif"},"1qbq6vj6u97ruc9m":{"_id":"1qbq6vj6u97ruc9m","source":"themes\\light\\source\\fancybox\\fancybox_overlay.png","mtime":1389801140000,"modified":false,"full_source":"C:\\Users\\林\\Documents\\GitHub\\woyaowenzi\\woyaowenzi.blog\\themes\\light\\source\\fancybox\\fancybox_overlay.png","path":"fancybox\\fancybox_overlay.png"},"j3ggtlf0ntwh9d17":{"_id":"j3ggtlf0ntwh9d17","source":"themes\\light\\source\\fancybox\\fancybox_sprite.png","mtime":1389801140000,"modified":false,"full_source":"C:\\Users\\林\\Documents\\GitHub\\woyaowenzi\\woyaowenzi.blog\\themes\\light\\source\\fancybox\\fancybox_sprite.png","path":"fancybox\\fancybox_sprite.png"},"4y351vpar9lkljm0":{"_id":"4y351vpar9lkljm0","source":"themes\\light\\source\\fancybox\\fancybox_sprite@2x.png","mtime":1389801140000,"modified":false,"full_source":"C:\\Users\\林\\Documents\\GitHub\\woyaowenzi\\woyaowenzi.blog\\themes\\light\\source\\fancybox\\fancybox_sprite@2x.png","path":"fancybox\\fancybox_sprite@2x.png"},"d7l0g00tt22o3upy":{"_id":"d7l0g00tt22o3upy","source":"themes\\light\\source\\fancybox\\jquery.fancybox.css","mtime":1389801140000,"modified":false,"full_source":"C:\\Users\\林\\Documents\\GitHub\\woyaowenzi\\woyaowenzi.blog\\themes\\light\\source\\fancybox\\jquery.fancybox.css","path":"fancybox\\jquery.fancybox.css"},"4m8kfe4qkukal8pu":{"_id":"4m8kfe4qkukal8pu","source":"themes\\light\\source\\fancybox\\jquery.fancybox.pack.js","mtime":1389801140000,"modified":false,"full_source":"C:\\Users\\林\\Documents\\GitHub\\woyaowenzi\\woyaowenzi.blog\\themes\\light\\source\\fancybox\\jquery.fancybox.pack.js","path":"fancybox\\jquery.fancybox.pack.js"},"8c34kx13qshqlzlz":{"_id":"8c34kx13qshqlzlz","source":"themes\\light\\source\\js\\gallery.js","mtime":1389801140000,"modified":false,"full_source":"C:\\Users\\林\\Documents\\GitHub\\woyaowenzi\\woyaowenzi.blog\\themes\\light\\source\\js\\gallery.js","path":"js\\gallery.js"},"j6cwn9qk57iacb4n":{"_id":"j6cwn9qk57iacb4n","source":"themes\\light\\source\\js\\jquery.imagesloaded.min.js","mtime":1389801140000,"modified":false,"full_source":"C:\\Users\\林\\Documents\\GitHub\\woyaowenzi\\woyaowenzi.blog\\themes\\light\\source\\js\\jquery.imagesloaded.min.js","path":"js\\jquery.imagesloaded.min.js"},"bc2q5axv96m5yzgg":{"_id":"bc2q5axv96m5yzgg","source":"themes\\light\\source\\css\\style.styl","mtime":1389801140000,"modified":false,"full_source":"C:\\Users\\林\\Documents\\GitHub\\woyaowenzi\\woyaowenzi.blog\\themes\\light\\source\\css\\style.styl","path":"css\\style.styl"},"n7cclch5sfkpa3cv":{"_id":"n7cclch5sfkpa3cv","source":"themes\\light\\source\\css\\font\\fontawesome-webfont.eot","mtime":1389801140000,"modified":false,"full_source":"C:\\Users\\林\\Documents\\GitHub\\woyaowenzi\\woyaowenzi.blog\\themes\\light\\source\\css\\font\\fontawesome-webfont.eot","path":"css\\font\\fontawesome-webfont.eot"},"51iisl4x1o4j63vn":{"_id":"51iisl4x1o4j63vn","source":"themes\\light\\source\\css\\font\\fontawesome-webfont.svg","mtime":1389801140000,"modified":false,"full_source":"C:\\Users\\林\\Documents\\GitHub\\woyaowenzi\\woyaowenzi.blog\\themes\\light\\source\\css\\font\\fontawesome-webfont.svg","path":"css\\font\\fontawesome-webfont.svg"},"ii0luhpuszv1f74w":{"_id":"ii0luhpuszv1f74w","source":"themes\\light\\source\\css\\font\\fontawesome-webfont.ttf","mtime":1389801140000,"modified":false,"full_source":"C:\\Users\\林\\Documents\\GitHub\\woyaowenzi\\woyaowenzi.blog\\themes\\light\\source\\css\\font\\fontawesome-webfont.ttf","path":"css\\font\\fontawesome-webfont.ttf"},"cpqqnwsok21dex04":{"_id":"cpqqnwsok21dex04","source":"themes\\light\\source\\css\\font\\fontawesome-webfont.woff","mtime":1389801140000,"modified":false,"full_source":"C:\\Users\\林\\Documents\\GitHub\\woyaowenzi\\woyaowenzi.blog\\themes\\light\\source\\css\\font\\fontawesome-webfont.woff","path":"css\\font\\fontawesome-webfont.woff"}},"Cache":{"qzqvkyea05d9olhk":{"_id":"qzqvkyea05d9olhk","content":"title: Hello World\ndate: 2014-01-02 13:17:56\ntags: [Android, iOS]\ncategories: [Android, iOS, Windows, Linux, C++, JAVA]\n---\n\nWelcome to [Hexo](http://zespia.tw/hexo)! This is your very first post. Check [documentation](http://zespia.tw/hexo/docs) to learn how to use.\nWelcome to [Hexo](http://zespia.tw/hexo)! This is your very first post. Check [documentation](http://zespia.tw/hexo/docs) to learn how to use.","mtime":1389801331000,"source":"_posts/hello-world.md"},"uy3img9r5l81xmd4":{"_id":"uy3img9r5l81xmd4","content":"---\ntitle: URI Scheme\ndate: 2014-1-3 00:13:29\ntags: [Network, URI Scheme]\n---\n\n###什么是URI Scheme?\n一般情况下，遇到这种概念不清的问题，最好的第一手资料就是wiki，实在看不懂，再看百度百科，但前者给出的资料一般都是更加准确一些。\n以下为维基百科和百度百科关于这个问题的连接：\n* [URI Scheme][1]\n* [URI][2]\n\n从维基百科上的定义我们得知，URI Scheme 是统一资源标识符（Uniform Resource Identifier ）的命名结构，说白了，就是定义一个资源的(暂且我们先认为 URI Scheme 与 URI 的概念是一样的）。但是，这个资源是一个宽泛的概念，并不一定是我们所说的 web 资源，它可以是你本机的一个文件，也可以是网络上的视频，等等。因此，我们有必要从一些常规的误区分辨出来，以加深我们的理解：\n* **认为 URI 就是 URL**。\n实际上，从其名称上来看，URI（Uniform Resource Identifier）和 URL（Uniform Resource Locator）两者名称都不一样，所以必然有区别，前者是统一资源标识符，后者是统一资源定位符，后者是网络上用于定位互联网上Web资源的，如 HTML 文档、图像、视频片段、程序等。\n\n* **它是一个通用定义**，不是 \"protocols\"，也不是 URI protocols 或者 URL protocols。\n* **它经常用于设计特殊的协议。**如http scheme（HTTP协议），XML namespaces，文件标示等等。从上面的一些结论来看，URI Scheme实际上一个概念性的东西，是一个规范，所以符合它的规范的都可以称之为 URI Scheme，当然，我们也可以设计我们自己的 scheme，用来实现我们特殊的目的。\n\n它一般具有如下的形式：\n```java\n<scheme name> : <hierarchical part> [ ? <query> ] [ # <fragment> ]\n```\n举几个常见的例子：\n```java\nhttp://write.blog.csdn.net/postedit/7313543,  \nfile:///c:/WINDOWS/clock.avi\ngit://github.com/user/project-name.git\nftp://user1:1234@地址\ned2k://|file|%5BMAC%E7%89%88%E6%9E%81%E5%93%81%E9%A3%9E%E8%BD%A69%EF%BC%9A%E6%9C%80%E9%AB%98%E9%80%9A%E7%BC%89%5D.%5BMACGAME%5DNeed.For.Speed.Most.Wanted.dmg|4096933888|2c55f0ad2cb7f6b296db94090b63e88e|h=ltcxuvnp24ufx25h2x7ugfaxfchjkwxa|/\n```\n这些都是一个URI Scheme。\n其中：\n`<scheme name>`：很明显，这是scheme的名称，对于上面五个scheme，它们scheme名分别是http, file, git, ftp, ed2k（电驴协议），实际上，它们也代表着协议名称。\n`<hierarchical part>`：实际上，一般情况，它包含 authority 和 path。 \n`<query>`：可选项目，一般使用；隔开或&隔开的键值对`<key>=<value>`\n`<fragmentg>` ：可选项目包，其它额外的标识信息\n\n从wiki上抄来一个更加具体的例子可能更好的说明问题，假设有如下两个URI Scheme，\nfoo://username:password@example.com:8042/over/there/index.dtb?type=animal&name=narwhal#nose\nurn:example:animal:ferret:nose\n它们的分析结果如下：\n\n如果你看懂了这个图，你肯定也明白URI Scheme到底是什么玩意了。\n![URI Scheme][3]\n\n---\n\n在android开发中，我们可能会需要分析webbrowser上web页面的一些特定URI Scheme，比如说点击网页上某个下载按钮，该按钮被点击后发出一个scheme，内里包含了需要下载的文件信息。我们监听这个点击事件，获取并分析URI Scheme，然后去下载对应的文件。实际上，就是要分析一些链接，然后再操作，那如何获取路径这个scheme？\n假设我们的scheme是电驴协议的URI，如：\n`ed2k://|file|%5BMAC%E7%89%88%E6%9E%81%E5%93%81%E9%A3%9E%E8%BD%A69%EF%BC%9A%E6%9C%80%E9%AB%98%E9%80%9A%E7%BC%89%5D.%5BMAC-GAME%5DNeed.For.Speed.Most.Wanted.dmg|4096933888|2c55f0ad2cb7f6b296db94090b63e88e|h=ltcxuvnp24ufx25h2x7ugfaxfchjkwxa|/`\n我们需要做的事就是通过webview重写`shouldOverrideUrlLoading`这个方法，获取指定的URI Scheme，并解析它，最后下载对应文件。\n该函数的作用是：在新的页面进行跳转前，给应用程序一次接管新的url的机会，当应用程序处理了该url，返回true，如果想让当然的webview自行处理，返回false.\n以下是一个简单的代码片段。\n```java\nwebview.setWebViewClient(new WebViewClient() {  \n    @Override  \n    public boolean shouldOverrideUrlLoading(WebView wv, String url) {\n        if (null != url && url.startsWith(\"ed2k:\")) {  \n            // Parse the url and download file async...  \n            return true;  \n        } else {  \n            return super.shouldOverrideUrlLoading(wv, url);  \n        }  \n    }  \n}); \n```\n\n[1]:http://en.wikipedia.org/wiki/URI_scheme\n[2]:http://baike.baidu.com/view/160675.htm\n[3]:http://hi.csdn.net/attachment/201203/3/16423_13307557171Ru7.png","mtime":1393776335000,"source":"_posts/URI Scheme.md"},"7tfybmz7phxpytt0":{"_id":"7tfybmz7phxpytt0","content":"---\ntitle: URI Scheme\ndate: 2014-1-3 00:13:29\ntags: [Network, URI Scheme]\n---\n\n###什么是URI Scheme?\n一般情况下，遇到这种概念不清的问题，最好的第一手资料就是wiki，实在看不懂，再看百度百科，但前者给出的资料一般都是更加准确一些。\n以下为维基百科和百度百科关于这个问题的连接：\n* [URI Scheme][1]\n* [URI][2]\n\n从维基百科上的定义我们得知，URI Scheme 是统一资源标识符（Uniform Resource Identifier ）的命名结构，说白了，就是定义一个资源的(暂且我们先认为 URI Scheme 与 URI 的概念是一样的）。但是，这个资源是一个宽泛的概念，并不一定是我们所说的 web 资源，它可以是你本机的一个文件，也可以是网络上的视频，等等。因此，我们有必要从一些常规的误区分辨出来，以加深我们的理解：\n* **认为 URI 就是 URL**。\n实际上，从其名称上来看，URI（Uniform Resource Identifier）和 URL（Uniform Resource Locator）两者名称都不一样，所以必然有区别，前者是统一资源标识符，后者是统一资源定位符，后者是网络上用于定位互联网上Web资源的，如 HTML 文档、图像、视频片段、程序等。\n\n* **它是一个通用定义**，不是 \"protocols\"，也不是 URI protocols 或者 URL protocols。\n* **它经常用于设计特殊的协议。**如http scheme（HTTP协议），XML namespaces，文件标示等等。从上面的一些结论来看，URI Scheme实际上一个概念性的东西，是一个规范，所以符合它的规范的都可以称之为 URI Scheme，当然，我们也可以设计我们自己的 scheme，用来实现我们特殊的目的。\n\n它一般具有如下的形式：\n```java\n<scheme name> : <hierarchical part> [ ? <query> ] [ # <fragment> ]\n```\n举几个常见的例子：\n```java\nhttp://write.blog.csdn.net/postedit/7313543,  \nfile:///c:/WINDOWS/clock.avi\ngit://github.com/user/project-name.git\nftp://user1:1234@地址\ned2k://|file|%5BMAC%E7%89%88%E6%9E%81%E5%93%81%E9%A3%9E%E8%BD%A69%EF%BC%9A%E6%9C%80%E9%AB%98%E9%80%9A%E7%BC%89%5D.%5BMACGAME%5DNeed.For.Speed.Most.Wanted.dmg|4096933888|2c55f0ad2cb7f6b296db94090b63e88e|h=ltcxuvnp24ufx25h2x7ugfaxfchjkwxa|/\n```\n这些都是一个URI Scheme。\n其中：\n<scheme name>：很明显，这是scheme的名称，对于上面五个scheme，它们scheme名分别是http, file, git, ftp, ed2k（电驴协议），实际上，它们也代表着协议名称。\n<hierarchical part>：实际上，一般情况，它包含 authority 和 path。 \n<query>：可选项目，一般使用；隔开或&隔开的键值对<key>=<value>\n<fragmentg> ：可选项目包，其它额外的标识信息\n\n从wiki上抄来一个更加具体的例子可能更好的说明问题，假设有如下两个URI Scheme，\nfoo://username:password@example.com:8042/over/there/index.dtb?type=animal&name=narwhal#nose\nurn:example:animal:ferret:nose\n它们的分析结果如下：\n\n如果你看懂了这个图，你肯定也明白URI Scheme到底是什么玩意了。\n\n-------------\n\n在android开发中，我们可能会需要分析webbrowser上web页面的一些特定URI Scheme，比如说，点击网页上某个下载按钮，该按钮被点击后发出一个scheme，内里包含了需要下载的文件信息。我们监听这个点击事件，获取其URI Scheme，分析该scheme，然后去下载对应的文件。实际上，就是要分析一些链接，然后再操作，那如何获取路径这个scheme？\n假设我们的scheme是电驴协议的URI，如：\ned2k://|file|%5BMAC%E7%89%88%E6%9E%81%E5%93%81%E9%A3%9E%E8%BD%A69%EF%BC%9A%E6%9C%80%E9%AB%98%E9%80%9A%E7%BC%89%5D.%5BMAC-GAME%5DNeed.For.Speed.Most.Wanted.dmg|4096933888|2c55f0ad2cb7f6b296db94090b63e88e|h=ltcxuvnp24ufx25h2x7ugfaxfchjkwxa|/\n我们需要做的事就是通过webview重写shouldOverrideUrlLoading这个方法，获取指定的URI Scheme，并解析它，最后下载对应文件。\n该函数的作用是：在新的页面进行跳转前，给应用程序一次接管新的url的机会，当应用程序处理了该url，返回true，如果想让当然的webview自行处理，返回false.\n以下是一个简单的代码片段。\n```java\nwebview.setWebViewClient(new WebViewClient() {  \n    @Override  \n    public boolean shouldOverrideUrlLoading(WebView wv, String url) {\n        if (null != url && url.startsWith(\"ed2k:\")) {  \n            // Parse the url and download file async...  \n            return true;  \n        } else {  \n            return super.shouldOverrideUrlLoading(wv, url);  \n        }  \n    }  \n}); \n```\n\n[1]:http://en.wikipedia.org/wiki/URI_scheme\n[2]:http://baike.baidu.com/view/160675.htm","mtime":1389284708000,"source":"_posts/URI Scheme.md"},"z76fpus7q6z6n05e":{"_id":"z76fpus7q6z6n05e","content":"---\ntitle: URI Scheme\ndate: 2014-1-3 00:13:29\ntags: [Network, URI Scheme]\n---\n\n###什么是URI Scheme?\n一般情况下，遇到这种概念不清的问题，最好的第一手资料就是wiki，实在看不懂，再看百度百科，但前者给出的资料一般都是更加准确一些。\n以下为维基百科和百度百科关于这个问题的连接：\n* [URI Scheme][1]\n* [URI][2]\n\n从维基百科上的定义我们得知，URI Scheme 是统一资源标识符（Uniform Resource Identifier ）的命名结构，说白了，就是定义一个资源的(暂且我们先认为 URI Scheme 与 URI 的概念是一样的）。但是，这个资源是一个宽泛的概念，并不一定是我们所说的 web 资源，它可以是你本机的一个文件，也可以是网络上的视频，等等。因此，我们有必要从一些常规的误区分辨出来，以加深我们的理解：\n* **认为 URI 就是 URL**。\n实际上，从其名称上来看，URI（Uniform Resource Identifier）和 URL（Uniform Resource Locator）两者名称都不一样，所以必然有区别，前者是统一资源标识符，后者是统一资源定位符，后者是网络上用于定位互联网上Web资源的，如 HTML 文档、图像、视频片段、程序等。\n\n* **它是一个通用定义**，不是 \"protocols\"，也不是 URI protocols 或者 URL protocols。\n* **它经常用于设计特殊的协议。**如http scheme（HTTP协议），XML namespaces，文件标示等等。从上面的一些结论来看，URI Scheme实际上一个概念性的东西，是一个规范，所以符合它的规范的都可以称之为 URI Scheme，当然，我们也可以设计我们自己的 scheme，用来实现我们特殊的目的。\n\n它一般具有如下的形式：\n```java\n<scheme name> : <hierarchical part> [ ? <query> ] [ # <fragment> ]\n```\n举几个常见的例子：\n```java\nhttp://write.blog.csdn.net/postedit/7313543,  \nfile:///c:/WINDOWS/clock.avi\ngit://github.com/user/project-name.git\nftp://user1:1234@地址\ned2k://|file|%5BMAC%E7%89%88%E6%9E%81%E5%93%81%E9%A3%9E%E8%BD%A69%EF%BC%9A%E6%9C%80%E9%AB%98%E9%80%9A%E7%BC%89%5D.%5BMACGAME%5DNeed.For.Speed.Most.Wanted.dmg|4096933888|2c55f0ad2cb7f6b296db94090b63e88e|h=ltcxuvnp24ufx25h2x7ugfaxfchjkwxa|/\n```\n这些都是一个URI Scheme。\n其中：\n<scheme name>：很明显，这是scheme的名称，对于上面五个scheme，它们scheme名分别是http, file, git, ftp, ed2k（电驴协议），实际上，它们也代表着协议名称。\n<hierarchical part>：实际上，一般情况，它包含 authority 和 path。 \n<query>：可选项目，一般使用；隔开或&隔开的键值对<key>=<value>\n<fragmentg> ：可选项目包，其它额外的标识信息\n\n从wiki上抄来一个更加具体的例子可能更好的说明问题，假设有如下两个URI Scheme，\nfoo://username:password@example.com:8042/over/there/index.dtb?type=animal&name=narwhal#nose\nurn:example:animal:ferret:nose\n它们的分析结果如下：\n\n如果你看懂了这个图，你肯定也明白URI Scheme到底是什么玩意了。\n\n-------------\n\n在android开发中，我们可能会需要分析webbrowser上web页面的一些特定URI Scheme，比如说，点击网页上某个下载按钮，该按钮被点击后发出一个scheme，内里包含了需要下载的文件信息。我们监听这个点击事件，获取其URI Scheme，分析该scheme，然后去下载对应的文件。实际上，就是要分析一些链接，然后再操作，那如何获取路径这个scheme？\n假设我们的scheme是电驴协议的URI，如：\ned2k://|file|%5BMAC%E7%89%88%E6%9E%81%E5%93%81%E9%A3%9E%E8%BD%A69%EF%BC%9A%E6%9C%80%E9%AB%98%E9%80%9A%E7%BC%89%5D.%5BMAC-GAME%5DNeed.For.Speed.Most.Wanted.dmg|4096933888|2c55f0ad2cb7f6b296db94090b63e88e|h=ltcxuvnp24ufx25h2x7ugfaxfchjkwxa|/\n我们需要做的事就是通过webview重写shouldOverrideUrlLoading这个方法，获取指定的URI Scheme，并解析它，最后下载对应文件。\n该函数的作用是：在新的页面进行跳转前，给应用程序一次接管新的url的机会，当应用程序处理了该url，返回true，如果想让当然的webview自行处理，返回false.\n以下是一个简单的代码片段。\n```java\nwebview.setWebViewClient(new WebViewClient() {  \n    @Override  \n    public boolean shouldOverrideUrlLoading(WebView wv, String url) {\n        if (null != url && url.startsWith(\"ed2k:\")) {  \n            // Parse the url and download file async...  \n            return true;  \n        } else {  \n            return super.shouldOverrideUrlLoading(wv, url);  \n        }  \n    }  \n}); \n```\n\n[1]:http://en.wikipedia.org/wiki/URI_scheme\n[2]:http://baike.baidu.com/view/160675.htm","mtime":1389284708000,"source":"_posts/URI Scheme.md"},"ij1uyg8jxv7fjori":{"_id":"ij1uyg8jxv7fjori","content":"---\ntitle: URI Scheme\ndate: 2014-1-3 00:13:29\ntags: [Network, URI Scheme]\n---\n\n###什么是URI Scheme?\n一般情况下，遇到这种概念不清的问题，最好的第一手资料就是wiki，实在看不懂，再看百度百科，但前者给出的资料一般都是更加准确一些。\n以下为维基百科和百度百科关于这个问题的连接：\n* [URI Scheme][1]\n* [URI][2]\n\n从维基百科上的定义我们得知，URI Scheme 是统一资源标识符（Uniform Resource Identifier ）的命名结构，说白了，就是定义一个资源的(暂且我们先认为 URI Scheme 与 URI 的概念是一样的）。但是，这个资源是一个宽泛的概念，并不一定是我们所说的 web 资源，它可以是你本机的一个文件，也可以是网络上的视频，等等。因此，我们有必要从一些常规的误区分辨出来，以加深我们的理解：\n* **认为 URI 就是 URL**。\n实际上，从其名称上来看，URI（Uniform Resource Identifier）和 URL（Uniform Resource Locator）两者名称都不一样，所以必然有区别，前者是统一资源标识符，后者是统一资源定位符，后者是网络上用于定位互联网上Web资源的，如 HTML 文档、图像、视频片段、程序等。\n\n* **它是一个通用定义**，不是 \"protocols\"，也不是 URI protocols 或者 URL protocols。\n* **它经常用于设计特殊的协议。**如http scheme（HTTP协议），XML namespaces，文件标示等等。从上面的一些结论来看，URI Scheme实际上一个概念性的东西，是一个规范，所以符合它的规范的都可以称之为 URI Scheme，当然，我们也可以设计我们自己的 scheme，用来实现我们特殊的目的。\n\n它一般具有如下的形式：\n```java\n<scheme name> : <hierarchical part> [ ? <query> ] [ # <fragment> ]\n```\n举几个常见的例子：\n```java\nhttp://write.blog.csdn.net/postedit/7313543,  \nfile:///c:/WINDOWS/clock.avi\ngit://github.com/user/project-name.git\nftp://user1:1234@地址\ned2k://|file|%5BMAC%E7%89%88%E6%9E%81%E5%93%81%E9%A3%9E%E8%BD%A69%EF%BC%9A%E6%9C%80%E9%AB%98%E9%80%9A%E7%BC%89%5D.%5BMACGAME%5DNeed.For.Speed.Most.Wanted.dmg|4096933888|2c55f0ad2cb7f6b296db94090b63e88e|h=ltcxuvnp24ufx25h2x7ugfaxfchjkwxa|/\n```\n这些都是一个URI Scheme。\n其中：\n<scheme name>：很明显，这是scheme的名称，对于上面五个scheme，它们scheme名分别是http, file, git, ftp, ed2k（电驴协议），实际上，它们也代表着协议名称。\n<hierarchical part>：实际上，一般情况，它包含 authority 和 path。 \n<query>：可选项目，一般使用；隔开或&隔开的键值对<key>=<value>\n<fragmentg> ：可选项目包，其它额外的标识信息\n\n从wiki上抄来一个更加具体的例子可能更好的说明问题，假设有如下两个URI Scheme，\nfoo://username:password@example.com:8042/over/there/index.dtb?type=animal&name=narwhal#nose\nurn:example:animal:ferret:nose\n它们的分析结果如下：\n\n如果你看懂了这个图，你肯定也明白URI Scheme到底是什么玩意了。\n\n-------------\n\n在android开发中，我们可能会需要分析webbrowser上web页面的一些特定URI Scheme，比如说，点击网页上某个下载按钮，该按钮被点击后发出一个scheme，内里包含了需要下载的文件信息。我们监听这个点击事件，获取其URI Scheme，分析该scheme，然后去下载对应的文件。实际上，就是要分析一些链接，然后再操作，那如何获取路径这个scheme？\n假设我们的scheme是电驴协议的URI，如：\ned2k://|file|%5BMAC%E7%89%88%E6%9E%81%E5%93%81%E9%A3%9E%E8%BD%A69%EF%BC%9A%E6%9C%80%E9%AB%98%E9%80%9A%E7%BC%89%5D.%5BMAC-GAME%5DNeed.For.Speed.Most.Wanted.dmg|4096933888|2c55f0ad2cb7f6b296db94090b63e88e|h=ltcxuvnp24ufx25h2x7ugfaxfchjkwxa|/\n我们需要做的事就是通过webview重写shouldOverrideUrlLoading这个方法，获取指定的URI Scheme，并解析它，最后下载对应文件。\n该函数的作用是：在新的页面进行跳转前，给应用程序一次接管新的url的机会，当应用程序处理了该url，返回true，如果想让当然的webview自行处理，返回false.\n以下是一个简单的代码片段。\n```java\nwebview.setWebViewClient(new WebViewClient() {  \n    @Override  \n    public boolean shouldOverrideUrlLoading(WebView wv, String url) {\n        if (null != url && url.startsWith(\"ed2k:\")) {  \n            // Parse the url and download file async...  \n            return true;  \n        } else {  \n            return super.shouldOverrideUrlLoading(wv, url);  \n        }  \n    }  \n}); \n```\n\n[1]:http://en.wikipedia.org/wiki/URI_scheme\n[2]:http://baike.baidu.com/view/160675.htm","mtime":1389284708000,"source":"_posts/URI Scheme.md"}}}